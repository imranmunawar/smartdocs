"""
Django settings for document_generator project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from typing import List

import environ
import os
import boto3
from django.contrib.auth import get_user_model
from django.urls import reverse_lazy
from django_sso.sso_service.backend import acceptor, EventAcceptor
from .settings_base import *


env = environ.Env(
    # set casting, default value
    DEBUG=(bool, True)
)
# reading .env file
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SSO = {
    # Specify SSO server base url (REQUIRED)
    'ROOT': os.getenv('SSO_ROOT_URL'),
    
	# Specify application token obtained in the SSO server admin panel under subordinated services (REQUIRED)
	'TOKEN': os.getenv('SSO_TOKEN'),

    'EVENT_ACCEPTOR_CLASS': 'generator_app.middleware.SSOEventAcceptor'

}

# Admin-specific settings
ADMIN_SETTINGS = {
    'ENABLE_ADMIN_DASHBOARD': True,
    'ADMIN_SESSION_TIMEOUT': 3600,
    'ADMIN_FILE_UPLOAD_MAX_SIZE': 5242880,  # 5MB
    'ADMIN_ALLOWED_FILE_TYPES': ['docx'],
}

# Update database settings for admin
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('ADMIN_DB_NAME'),
        'USER': os.getenv('ADMIN_DB_USER'),
        'PASSWORD': os.getenv('ADMIN_DB_PASSWORD'),
        'HOST': os.getenv('ADMIN_DB_HOST'),
        'PORT': os.getenv('ADMIN_DB_PORT'),
    }
}

STATICFILES_DIRS = [
    # Use the 'static' directory inside your app
    os.path.join(BASE_DIR, 'generator_app', 'static'),
]

# URL pattern for static files
STATIC_URL = '/static/'

# Admin static files configuration
ADMIN_STATIC_URL = '/admin/static/'
ADMIN_STATIC_ROOT = os.path.join(BASE_DIR, 'admin_static')

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

STRIPE_STAGING_LEVEL_ZERO_PROD = os.getenv("STRIPE_STAGING_LEVEL_ZERO_PROD", None)
STRIPE_STAGING_LEVEL_ONE_PROD = os.getenv("STRIPE_STAGING_LEVEL_ONE_PROD", None)
STRIPE_STAGING_LEVEL_TWO_PROD = os.getenv("STRIPE_STAGING_LEVEL_TWO_PROD", None)
STRIPE_STAGING_LEVEL_THREE_PROD = os.getenv("STRIPE_STAGING_LEVEL_THREE_PROD", None)

GS_BUCKET_NAME = os.getenv('GS_BUCKET_NAME')
GCS_ENV_FOLDER = os.getenv('GCS_ENV_FOLDER')

DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME')
AWS_S3_ENV_FOLDER = os.getenv('AWS_S3_ENV_FOLDER')